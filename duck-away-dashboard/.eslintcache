[{"/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/index.js":"1","/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/App.js":"2","/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/reportWebVitals.js":"3","/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/services/index.js":"4","/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/pages/index.js":"5","/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/pages/Checkpoints.js":"6","/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/services/api.service.js":"7","/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/pages/Logs.js":"8","/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/pages/Insights.js":"9","/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/config/index.js":"10","/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/layouts/index.js":"11","/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/components/index.js":"12","/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/layouts/StandardLayout.js":"13","/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/components/AllRoutes/index.js":"14","/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/components/AllRoutes/MapDrawings.js":"15"},{"size":270,"mtime":1610548601653,"results":"16","hashOfConfig":"17"},{"size":641,"mtime":1610548601625,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1610548601654,"results":"19","hashOfConfig":"17"},{"size":30,"mtime":1610548601653,"results":"20","hashOfConfig":"17"},{"size":82,"mtime":1610548601638,"results":"21","hashOfConfig":"17"},{"size":5199,"mtime":1610548601638,"results":"22","hashOfConfig":"17"},{"size":2426,"mtime":1610548601639,"results":"23","hashOfConfig":"17"},{"size":3544,"mtime":1610551189837,"results":"24","hashOfConfig":"17"},{"size":1246,"mtime":1610548601638,"results":"25","hashOfConfig":"17"},{"size":219,"mtime":1610548601636,"results":"26","hashOfConfig":"17"},{"size":34,"mtime":1610548601637,"results":"27","hashOfConfig":"17"},{"size":76,"mtime":1610548601636,"results":"28","hashOfConfig":"17"},{"size":261,"mtime":1610548601637,"results":"29","hashOfConfig":"17"},{"size":699,"mtime":1610548601633,"results":"30","hashOfConfig":"17"},{"size":4611,"mtime":1610548601633,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"xebi93",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"66","usedDeprecatedRules":"67"},"/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/index.js",[],["68","69"],"/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/App.js",[],"/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/reportWebVitals.js",[],"/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/services/index.js",[],"/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/pages/index.js",[],"/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/pages/Checkpoints.js",["70","71","72","73","74"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { StandardLayout } from \"../layouts\";\nimport { useApi } from \"../services\";\n\nimport * as Config from '../config';\n\nimport Check from '../assets/check.svg';\n\nexport const Checkpoints = () => {\n  const history = useHistory();\n  const { token, getCheckpoints } = useApi();\n\n  const [ checkpoints, setCheckpoints ] = useState([]);\n  const [ canFetch, setCanFetch ] = useState(true);\n  const [ currentPage, setCurrentPage ] = useState(1);\n\n  const fetchData = async () => {\n    const data = await getCheckpoints(5, currentPage);\n\n    if (data !== undefined) {\n      console.log(data);\n      setCurrentPage(currentPage + 1)\n      setCheckpoints([...checkpoints, ...data.checkpoints.docs]);\n    };\n  };\n\n  useEffect(() => {\n    if (token) {\n      fetchData();\n      registerInfiniteScroll('infinite-scroll');\n    }\n  }, [token]);\n\n  // Infinite scrolling\n  useEffect(() => {\n      const func = async () => {\n          await fetchData();\n          setCanFetch(true)\n      }\n\n      if (!canFetch) func();\n  }, [canFetch])\n\n  const registerInfiniteScroll = async (id) => {\n    const el = document.getElementById('infinite-scroll');\n    window.addEventListener('scroll', async (e) => {\n        checkOnBottom(e);\n    })\n  }\n\n  const checkOnBottom = (e) => {\n    const offset = 50;\n    const isOnBottom = (window.innerHeight + window.scrollY) >= document.body.offsetHeight;\n    if (isOnBottom && canFetch) {\n        setCanFetch(false);\n    }\n  }\n\n  return (\n    <StandardLayout>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12 d-flex justify-content-center\">\n            <span className=\"dashboard__options\">\n              <h3 className=\"dashboard__options--option active-option\">\n                All checkpoints\n                <span className=\"dashboard__options--option--border\"></span>\n              </h3>\n              <h3 className=\"dashboard__options--option\" onClick={() => history.push('/insights')}>\n                All routes\n                <span className=\"dashboard__options--option--border\"></span>\n              </h3>\n              <h3 className=\"dashboard__options--option\" onClick={() => history.push('/logs')}>\n                All logs\n                <span className=\"dashboard__options--option--border\"></span>\n              </h3>\n            </span>\n          </div>\n        </div>\n        <div className=\"row d-flex justify-content-center dashboard__checkpoints\" id=\"infinite-scroll\">\n          {\n            checkpoints && (\n              checkpoints.map((innerElement, innerIndex) => {\n                  return (\n                    <div key={innerIndex} className=\"col-12 col-md-10\">\n                      <div className=\"dashboard__checkpoints--checkpoint\">\n                        <div className=\"dashboard__checkpoints--checkpoint--avatar\">\n                          <span>\n                            <img src={`${Config.duckAwayConfig.apiUrl}picture/${innerElement.duck.pictureName}`} alt=\"duck\" />\n                            <p>\n                              {innerElement.duck.name}\n                            </p>\n                          </span>\n                        </div>\n                        <div className=\"dashboard__checkpoints--checkpoint--position d-flex align-items-center\">\n                          <span>\n                            <p>\n                              <strong>Longitude:</strong> {innerElement.position.lon}\n                            </p>\n                            <p>\n                              <strong>Latitude:</strong> {innerElement.position.lat}\n                            </p>\n                          </span>\n                        </div>\n                        <div className=\"dashboard__checkpoints--checkpoint--distance d-flex align-items-center\">\n                          <span>\n                            <p>\n                              <strong>Afstand van start</strong> {innerElement.duck.distanceFromStart.toFixed(2)}km\n                            </p>\n                            <p>\n                              <strong>Afstand totaal</strong> {innerElement.duck.totalDistance.toFixed(2)}km\n                            </p>\n                          </span>\n                        </div>\n                        <div className=\"dashboard__checkpoints--checkpoint--image\">\n                          <img src={`${Config.duckAwayConfig.apiUrl}picture/${innerElement.pictureName}`} alt=\"subscription\" />\n                        </div>\n                        {\n                          !innerElement.approved && (\n                            <div className=\"dashboard__checkpoints--checkpoint--approve\" onClick={() => history.push(`${Config.duckAwayConfig.apiUrl}admin/approve/checkpoint/${innerElement._id}`)}>\n                              <img src={Check} alt=\"check\" />\n                            </div>\n                          )\n                        }\n                      </div>\n                    </div>\n                  )\n                })\n            )\n          }\n        </div>\n      </div>\n    </StandardLayout>\n  )\n};\n","/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/services/api.service.js",[],"/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/pages/Logs.js",["75","76","77","78"],"import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { format } from 'date-fns';\n\nimport { StandardLayout } from '../layouts';\n\nimport { useApi } from '../services';\n\nimport * as Config from '../config';\n\nexport const Logs = () => {\n  const history = useHistory();\n\n  const { token, getLogs } = useApi();\n\n  const [ logs, setLogs ] = useState([]);\n  const [ canFetch, setCanFetch ] = useState(true);\n  const [ currentPage, setCurrentPage ] = useState(1);\n\n  const fetchData = async () => {\n    const data = await getLogs(4, currentPage);\n\n    if (data !== undefined) {\n      setCurrentPage(currentPage + 1)\n      setLogs([...logs, ...data.logs.docs]);\n    };\n  };\n\n  useEffect(() => {\n    if (token) {\n      fetchData();\n      registerInfiniteScroll('infinite-scroll');\n    }\n  }, [token]);\n\n  // Infinite scrolling\n  useEffect(() => {\n      const func = async () => {\n          await fetchData();\n          setCanFetch(true)\n      }\n\n      if (!canFetch) func();\n  }, [canFetch])\n\n  const registerInfiniteScroll = async (id) => {\n    const el = document.getElementById('infinite-scroll');\n    window.addEventListener('scroll', async (e) => {\n        checkOnBottom(e);\n    })\n  }\n\n  const checkOnBottom = (e) => {\n    const offset = 50;\n    const isOnBottom = (window.innerHeight + window.scrollY) >= document.body.offsetHeight;\n    if (isOnBottom && canFetch) {\n        setCanFetch(false);\n    }\n  }\n\n  return (\n    <StandardLayout>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12 d-flex justify-content-center\">\n            <span className=\"dashboard__options\">\n              <h3 className=\"dashboard__options--option\" onClick={() => history.push('/')}>\n                All checkpoints\n                <span className=\"dashboard__options--option--border\"></span>\n              </h3>\n              <h3 className=\"dashboard__options--option\" onClick={() => history.push('/insights')}>\n                All routes\n                <span className=\"dashboard__options--option--border\"></span>\n              </h3>\n              <h3 className=\"dashboard__options--option active-option\">\n                All logs\n                <span className=\"dashboard__options--option--border\"></span>\n              </h3>\n            </span>\n          </div>\n        </div>\n        <div className=\"row d-flex justify-content-center dashboard__logs\" id=\"infinite-scroll\">\n          {\n            logs && logs.map((log, index) => {\n              return (\n                <div key={index} className=\"col-12 col-md-10\">\n                  <div className=\"dashboard__logs--log\">\n                    <div className=\"dashboard__logs--log--avatar\">\n                        <span>\n                          <img src={`${Config.duckAwayConfig.apiUrl}picture/${log.duck.pictureName}`} alt=\"duck\" />\n                        </span>\n                      </div>\n                      <div className=\"dashboard__logs--log--date d-flex align-items-center\">\n                        <span>\n                          <h3>\n                            {log.duck.name}\n                          </h3>\n                          <p>\n                            <strong>Scanned on:</strong> {format(new Date(log.createdAt), 'dd/MM/yyyy kk:mm:ss')}\n                          </p>\n                        </span>\n                    </div>\n                  </div>\n                </div>\n              )\n            })\n          }\n        </div>\n      </div>\n    </StandardLayout>\n  )\n};\n","/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/pages/Insights.js",[],"/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/config/index.js",[],"/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/layouts/index.js",[],"/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/components/index.js",[],"/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/layouts/StandardLayout.js",[],"/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/components/AllRoutes/index.js",["79"],"import React from 'react';\nimport ReactMapboxGl from 'react-mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nimport MapDrawings from './MapDrawings';\nimport * as config from '../../config';\nimport './MapOfAllRoutes.scss';\n\nexport const MapOfAllRoutes = () => {\n  const key = config.duckAwayConfig.mapboxApiKey;\n  const Map = ReactMapboxGl({\n    accessToken: key\n  });\n\n\n  return(\n      <div className=\"map-container\">\n        <Map\n          center={[3.71667,51.05]}\n          style=\"mapbox://styles/mapbox/streets-v9\"\n          containerStyle={{\n            height: '40vw',\n            width: '70vw'\n          }}\n        >\n            <MapDrawings />\n        </Map>\n        \n      </div>\n  );\n\n}\n","/Users/hansvertriest/Documents/School/sem5/WoT/duck-away/duck-away-dashboard/src/App/components/AllRoutes/MapDrawings.js",["80","81","82"],"// System imports\nimport React, { Fragment, useState, useEffect  } from 'react';\nimport { Layer, Marker, Feature, Popup } from 'react-mapbox-gl';\n\n// Service imports\nimport { useApi } from '../../services';\n\n\nconst MapDrawings = () => {\n    // api functions\n    const { getDucks, token } = useApi();\n\n    // Defining states\n    const [ route, setRoute ] = useState(undefined);\n    const [ checkPoints, setCheckPoints ] = useState(undefined);\n    const [ ducks, setDucks ] = useState(undefined);\n    const [ popupContent, setPopupContent ] = useState(undefined);\n\n    // Mapbox-styling\n    const lineLayout = {\n        'line-cap': 'round',\n        'line-join': 'round'\n    }\n\n    const linePaint = {\n        'line-color': '#2CAEF8',\n        'line-width': 12,\n    }\n\n    const circlePaint = {\n        'circle-radius': 10,\n        'circle-color': '#E54E52',\n    };\n\n\n    // Fetch duck on load\n    useEffect(() => {\n        const fetchData = async() => {\n            const result = await getDucks();\n            setDucks(result.ducks.map(formatDuck));\n        }\n\n        if (token) fetchData();\n    }, [token]);\n  \n    // Filter ducks\n    const formatDuck = (duck) => {\n        const newDuck = {};\n        newDuck.name = duck.name;\n        newDuck.pictureName = duck.pictureName;\n        newDuck.positions = [duck.startPosition, ...duck.checkPoints.map((checkPoint) => checkPoint.position)]\n        newDuck.checkPoints = duck.checkPoints;\n        newDuck.totalDistance = duck.totalDistance;\n        newDuck.distanceFromStart = duck. distanceFromStart;\n        return newDuck\n    }\n\n    // Select a route to be shown\n    const selectRoute = (positions, checkPoints) => {\n        setRoute(positions.map((position) => [position.lon, position.lat]));\n        setCheckPoints(checkPoints);\n        setPopupContent(undefined)\n    }\n\n    // Open popup\n    const openPopup = (checkPoint) => {\n        const content = {\n            image: checkPoint.pictureName,\n            coordinates: [checkPoint.position.lon, checkPoint.position.lat],\n        }\n\n        setPopupContent((popupContent && popupContent.image === content.image) ? undefined : content);\n    }\n\n    return (\n        <Fragment>\n\n            {/* \n                Display duck markers\n            */}\n            {\n              (ducks) \n              ? ducks.map((duck, index) => {\n                return (\n                    <Marker\n                        key={`duck-${index}`}\n                        onClick={() => selectRoute(duck.positions, duck.checkPoints)}\n                        coordinates={[duck.positions[duck.positions.length-1].lon, duck.positions[duck.positions.length-1].lat]}\n                        anchor=\"bottom\"\n                    >\n                        <img src={`https://duck-away-api.herokuapp.com/picture/${duck.pictureName}`} alt=\"marker\" style={{width: '25px'}}/>\n                    </Marker>\n                    \n                );\n              })\n              : null\n            }\n\n            {/* \n                Display route\n            */}\n            <Layer type=\"line\" layout={lineLayout} paint={linePaint}>\n                {\n                (route) \n                ?\n                    <Feature coordinates={route} />\n                : null\n                }\n            </Layer>\n\n            {/* \n                Display checkpoint circles\n            */}\n            <Layer type=\"circle\" paint={circlePaint} >\n                {\n                (checkPoints) \n                ? checkPoints.map((checkPoint, index) => {\n                    return (\n                            <Feature \n                                key={`point-${index}`} \n                                id={`point-${index}`} \n                                coordinates={[checkPoint.position.lon, checkPoint.position.lat]} \n                                onClick={() => openPopup(checkPoint)}\n                            />\n                        \n                    );\n                })\n                : null\n                }\n            </Layer>\n\n\n            {/* \n                Display popup\n            */}\n            {\n                (popupContent)\n                ? <Popup\n                    coordinates={popupContent.coordinates}\n                    offset={{\n                    'bottom-left': [12, -38],  'bottom': [0, -38], 'bottom-right': [-12, -38]\n                    }}>\n                    <img className=\"popup-img\" src={`https://duck-away-api.herokuapp.com/picture/${popupContent.image}`} /> \n                </Popup>\n                : null\n            }\n        </Fragment>\n    );\n}\n\nexport default MapDrawings;",["83","84"],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":1,"column":17,"nodeType":"91","messageId":"92","endLine":1,"endColumn":28},{"ruleId":"93","severity":1,"message":"94","line":34,"column":6,"nodeType":"95","endLine":34,"endColumn":13,"suggestions":"96"},{"ruleId":"93","severity":1,"message":"97","line":44,"column":6,"nodeType":"95","endLine":44,"endColumn":16,"suggestions":"98"},{"ruleId":"89","severity":1,"message":"99","line":47,"column":11,"nodeType":"91","messageId":"92","endLine":47,"endColumn":13},{"ruleId":"89","severity":1,"message":"100","line":54,"column":11,"nodeType":"91","messageId":"92","endLine":54,"endColumn":17},{"ruleId":"93","severity":1,"message":"94","line":34,"column":6,"nodeType":"95","endLine":34,"endColumn":13,"suggestions":"101"},{"ruleId":"93","severity":1,"message":"97","line":44,"column":6,"nodeType":"95","endLine":44,"endColumn":16,"suggestions":"102"},{"ruleId":"89","severity":1,"message":"99","line":47,"column":11,"nodeType":"91","messageId":"92","endLine":47,"endColumn":13},{"ruleId":"89","severity":1,"message":"100","line":54,"column":11,"nodeType":"91","messageId":"92","endLine":54,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":20,"column":11,"nodeType":"105","endLine":20,"endColumn":52},{"ruleId":"93","severity":1,"message":"106","line":44,"column":8,"nodeType":"95","endLine":44,"endColumn":15,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":54,"column":37,"nodeType":"110","messageId":"111","endLine":54,"endColumn":60,"fix":"112"},{"ruleId":"113","severity":1,"message":"114","line":143,"column":21,"nodeType":"115","endLine":143,"endColumn":124},{"ruleId":"85","replacedBy":"116"},{"ruleId":"87","replacedBy":"117"},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchData' and 'registerInfiniteScroll'. Either include them or remove the dependency array.","ArrayExpression",["120"],"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["121"],"'el' is assigned a value but never used.","'offset' is assigned a value but never used.",["122"],["123"],"react/style-prop-object","Style prop value must be an object","JSXAttribute","React Hook useEffect has a missing dependency: 'getDucks'. Either include it or remove the dependency array.",["124"],"no-whitespace-before-property","Unexpected whitespace before property distanceFromStart.","MemberExpression","unexpectedWhitespace",{"range":"125","text":"126"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["118"],["119"],"no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"127","fix":"131"},{"desc":"129","fix":"132"},{"desc":"133","fix":"134"},[1527,1529],".","Update the dependencies array to be: [fetchData, registerInfiniteScroll, token]",{"range":"135","text":"136"},"Update the dependencies array to be: [canFetch, fetchData]",{"range":"137","text":"138"},{"range":"139","text":"136"},{"range":"140","text":"138"},"Update the dependencies array to be: [getDucks, token]",{"range":"141","text":"142"},[933,940],"[fetchData, registerInfiniteScroll, token]",[1121,1131],"[canFetch, fetchData]",[834,841],[1022,1032],[1098,1105],"[getDucks, token]"]